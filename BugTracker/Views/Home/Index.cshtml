@model BugTracker.Models.DataViewModel

@using BugTracker.Helpers
@using Microsoft.AspNet.Identity
@{
    var getData = new GetDataHelper();
    

}
<!-- partial -->

<div class="content-wrapper">
    <div class="row">
        <div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 grid-margin stretch-card">
            <div class="card card-statistics">
                <div class="card-body">
                    <div class="clearfix">
                        <div class="float-left">
                            <i class="mdi mdi-calendar text-danger icon-lg"></i>
                        </div>
                        <div class="float-right">
                            <p class="mb-0 text-right">Total Projects</p>
                            <div class="fluid-container">
                                @if (User.IsInRole("Admin"))
                                {
                                    <h3 class="font-weight-medium text-right mb-0">@Model.myProjects.Count()</h3>
                                }
                                else
                                {
                                    var userId = User.Identity.GetUserId();
                                    var projHelper = new ProjectHelper();

                                    <h3 class="font-weight-medium text-right mb-0">@projHelper.ListUserProjects(userId).Count()</h3>
                                }
                            </div>
                        </div>
                    </div>
                    <p class="text-muted mt-3 mb-0">
                        @*<i class="mdi mdi-reload mr-1" aria-hidden="true"></i> Product-wise sales*@
                    </p>
                </div>
            </div>
        </div>
        <div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 grid-margin stretch-card">
            <div class="card card-statistics">
                <div class="card-body">
                    <div class="clearfix">
                        <div class="float-left">
                            <i class="mdi mdi-receipt text-warning icon-lg"></i>
                        </div>
                        <div class="float-right">
                            <p class="mb-0 text-right">Total Tickets</p>
                            <div class="fluid-container">
                                @if (User.IsInRole("Admin"))
                                {
                                    <h3 class="font-weight-medium text-right mb-0">@Model.myTickets.Count()</h3>
                                }
                                else if (User.IsInRole("Project Manager") || User.IsInRole("Developer"))
                                {
                                    var tickHelper = new TicketHelper();

                                    <h3 class="font-weight-medium text-right mb-0">@tickHelper.ListUserTickets().Count()</h3>
                                }
                                else if (User.IsInRole("Submitter"))
                                {
                                    var userId = User.Identity.GetUserId();
                                    var tickHelper = new TicketHelper();
                                    <h3 class="font-weight-medium text-right mb-0">@tickHelper.ListSubTickets().Count()</h3>
                                }
                            </div>
                        </div>
                    </div>
                    <p class="text-muted mt-3 mb-0">
                        @*<i class="mdi mdi-reload mr-1" aria-hidden="true"></i> Product-wise sales*@
                    </p>
                </div>
            </div>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <div class="col-xl-4 col-lg-4 col-md-4 col-sm-6 grid-margin stretch-card">
                <div class="card card-statistics">
                    <div class="card-body">
                        <div class="clearfix">
                            <div class="float-left">
                                <i class="mdi mdi-account-location text-info icon-lg"></i>
                            </div>
                            <div class="float-right">
                                <p class="mb-0 text-right">Total Users</p>
                                <div class="fluid-container">
                                    <h3 class="font-weight-medium text-right mb-0">@Model.myUsers.Count()</h3>
                                </div>
                            </div>
                        </div>
                        <p class="text-muted mt-3 mb-0">
                            @*<i class="mdi mdi-reload mr-1" aria-hidden="true"></i> Product-wise sales*@
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-body">
                    @if (User.IsInRole("Admin"))
                    {
                        <h5 class="card-title mb-4">All Tickets</h5>
                    }
                    else if (User.IsInRole("Project Manager"))
                    {
                        <h5 class="card-title mb-4">My Projects</h5>
                    }
                    else
                    {
                        <h5 class="card-title mb-4">My Tickets</h5>
                    }

                        <div class="fluid-container">
                            @if (User.IsInRole("Admin"))
                            {

                                foreach (var tick in Model.myTickets.OrderByDescending(c => c.Created))
                                {
                                    <div class="row ticket-card mt-3 pb-2 border-bottom pb-3 mb-3">
                                        <div class="col-md-1">


                                            <img class="img-sm rounded-circle mb-4 mb-md-0" src="~/img/pic-1.png" alt="profile image">
                                        </div>
                                        <div class="ticket-details col-md-9">
                                            <div class="d-flex">
                                                @if (tick.AssignedToUser == null)
                                                {
                                                    <p class="text-dark font-weight-semibold mr-2 mb-0 no-wrap">Unassigned:</p>
                                                }
                                                else
                                                {
                                                    <p class="text-dark font-weight-semibold mr-2 mb-0 no-wrap">@tick.AssignedToUser.FirstName :</p>
                                                }
                                                <p class="text-primary mr-1 mb-0">[@tick.Title]</p>
                                                <p class="mb-0 ellipsis">@tick.Created.ToString("MM/dd/yyyy")</p>
                                            </div>
                                            <p class="text-gray ellipsis mb-2">
                                                Description : @tick.Description
                                            </p>
                                            <div class="row text-gray d-md-flex d-none">
                                                <div class="col-4 d-flex ">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Type :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-success">@tick.TicketType.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Priority :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-danger">@tick.TicketPriority.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Status :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-warning">@tick.TicketStatus.Name</span></small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="ticket-actions col-md-2">
                                            <div class="btn-group dropdown">
                                                <button type="button" class="btn btn-primary dropdown-toggle btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    Info
                                                </button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="@Url.Action("Details", "Tickets", new { id = tick.Id })">
                                                        <i class="fa fa-reply fa-fw"></i>Details
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (User.IsInRole("Project Manager"))
                            {
                                var userId = User.Identity.GetUserId();
                                var proj = new ProjectHelper();

                                foreach (var pHelp in proj.ListUserProjects(userId).OrderByDescending(c => c.Created))
                                {

                                    <div class="row ticket-card mt-3 pb-2 border-bottom pb-3 mb-3">
                                        <div class="col-md-1">
                                            <img class="img-sm rounded-circle mb-4 mb-md-0" src="~/img/pic-1.png" alt="profile image">
                                        </div>
                                        <div class="ticket-details col-md-9">
                                            <div class="d-flex">

                                                <p class="text-primary mr-1 mb-0">[@pHelp.Name]</p>
                                                <p class="mb-0 ellipsis">@pHelp.Created.ToString("MM/dd/yyyy")</p>
                                            </div>
                                            <p class="text-gray ellipsis mb-2">
                                                Description : @pHelp.Description
                                            </p>
                                        </div>
                                        <div class="ticket-actions col-md-2">
                                            <div class="btn-group dropdown">
                                                <button type="button" class="btn btn-primary dropdown-toggle btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    Info
                                                </button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="@Url.Action("Assigned", "Projects")">
                                                        <i class="fa fa-reply fa-fw"></i>View
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (User.IsInRole("Developer"))
                            {
                                var tHelp = new TicketHelper();

                                foreach (var tick in tHelp.ListUserTickets().OrderByDescending(c => c.Created))
                                {

                                    <div class="row ticket-card mt-3 pb-2 border-bottom pb-3 mb-3">
                                        <div class="col-md-1">
                                            <img class="img-sm rounded-circle mb-4 mb-md-0" src="~/img/pic-1.png" alt="profile image">
                                        </div>
                                        <div class="ticket-details col-md-9">
                                            <div class="d-flex">
                                                <p class="text-primary mr-1 mb-0">[@tick.Title]</p>
                                                <p class="mb-0 ellipsis">@tick.Created.ToString("MM/dd/yyyy")</p>
                                            </div>
                                            <p class="text-gray ellipsis mb-2">
                                                Description : @tick.Description
                                            </p>
                                            <div class="row text-gray d-md-flex d-none">
                                                <div class="col-4 d-flex ">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Type :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-success">@tick.TicketType.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Priority :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-danger">@tick.TicketPriority.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Status :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-warning">@tick.TicketStatus.Name</span></small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="ticket-actions col-md-2">
                                            <div class="btn-group dropdown">
                                                <button type="button" class="btn btn-primary dropdown-toggle btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    Info
                                                </button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="@Url.Action("Details", "Tickets", new { id = tick.Id })">
                                                        <i class="fa fa-reply fa-fw"></i>Details
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else if (User.IsInRole("Submitter"))
                            {
                                var tHelp = new TicketHelper();

                                foreach (var tick in tHelp.ListSubTickets().OrderByDescending(c => c.Created))
                                {

                                    <div class="row ticket-card mt-3 pb-2 border-bottom pb-3 mb-3">
                                        <div class="col-md-1">
                                            <img class="img-sm rounded-circle mb-4 mb-md-0" src="~/img/pic-1.png" alt="profile image">
                                        </div>
                                        <div class="ticket-details col-md-9">
                                            <div class="d-flex">
                                                <p class="text-primary mr-1 mb-0">[@tick.Title]</p>
                                                <p class="mb-0 ellipsis">@tick.Created.ToString("MM/dd/yyyy")</p>
                                            </div>
                                            <p class="text-gray ellipsis mb-2">
                                                Description : @tick.Description
                                            </p>
                                            <div class="row text-gray d-md-flex d-none">
                                                <div class="col-4 d-flex ">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Type :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-success">@tick.TicketType.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Priority :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-danger">@tick.TicketPriority.Name</span></small>
                                                </div>
                                                <div class="col-4 d-flex">
                                                    <small class="mb-0 mr-2 text-muted text-muted">Status :</small>
                                                    <small class="Last-responded mr-2 mb-0 text-muted text-muted"><span class="badge badge-warning">@tick.TicketStatus.Name</span></small>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="ticket-actions col-md-2">
                                            <div class="btn-group dropdown">
                                                <button type="button" class="btn btn-primary dropdown-toggle btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    Info
                                                </button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="@Url.Action("Details", "Tickets", new { id = tick.Id })">
                                                        <i class="fa fa-reply fa-fw"></i>Details
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                         </div>
                </div>
            </div>
        </div>
    </div>
    @if (User.IsInRole("Admin"))
    {
        <div class="row">
            <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">Ticket Priority Bar chart</h4>
                        <canvas id="barChart" style="height:230px"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">TicketType Doughnut Chart</h4>
                        <canvas id="doughnutChart" style="height:250px"></canvas>
                    </div>
                </div>
            </div>
        </div>
    }

</div>

@section Scripts{ 

    <script> 

        var options = {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            legend: {
                display: false
            },
            elements: {
                point: {
                    radius: 0
                }
            }

        };

        if ($("#barChart").length) {

            var barChartDataRoute = '@Url.Action("GetBarChartData","ChartData")';

            $.post(barChartDataRoute).then(function (response) {

                var barChartCanvas = $("#barChart").get(0).getContext("2d");
                // This will get the first returned node in the jQuery collection.
                var barChart = new Chart(barChartCanvas, {
                    type: 'bar',
                    data: {
                        labels: response.Labels,
                        datasets: [{
                            label: '# in this Priority',
                            data: response.Values,
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                            ],
                            borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: options
                });

            });

            
        }

    </script>

    <script>
        var doughnutPieOptions = {
            responsive: true,
            animation: {
                animateScale: true,
                animateRotate: true
            }
        };

        if ($("#doughnutChart").length) {

            var doughnutChartDataRoute = '@Url.Action("GetDoughnutChartData","ChartData")';

            $.post(doughnutChartDataRoute).then(function (response) {
                var doughnutChartCanvas = $("#doughnutChart").get(0).getContext("2d");
                var doughnutChart = new Chart(doughnutChartCanvas, {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: response.Values,
                            backgroundColor: [
                                'rgba(144, 191, 166, 0.5)',
                                'rgba(146, 172, 215, 0.5)',
                                'rgba(255, 195, 131, 0.5)',
                                'rgba(75, 192, 192, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(255, 159, 64, 0.5)'
                            ],
                            borderColor: [
                                'rgba(144,191,166,1)',
                                'rgba(146, 172, 215, 1)',
                                'rgba(255, 195, 131, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                            ],
                        }],

                        // These labels appear in the legend and in the tooltips when hovering different arcs
                        labels: response.Labels,
                    },
                    options: doughnutPieOptions
                });

            });
            
        }

    </script>
}